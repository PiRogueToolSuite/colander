version: '3'

volumes:
  colander_local_postgres_data: { }
  colander_local_postgres_data_backups: { }
  colander_local_minio_data: { }
  colander_local_es_data: { }

networks:
  web:

services:
  traefik:
    image: traefik:v2.9.8
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    depends_on:
      - django
      - cyberchef
      - keycloak
    restart: always
    ports:
      - "88:80"
      - "8088:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - web

  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: colander_local_django
    container_name: colander_local_django
    platform: linux/x86_64
    depends_on:
      - postgres
      - minio
      - elasticsearch
      - redis
      - cyberchef
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    networks:
      - web
    ports:
      - "8000:8000"
    command: /start
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=true"
      # Here we have to define the URL
      - "traefik.http.routers.django.rule=Host(`colander.radis`)"
      # Here we are defining wich entrypoint should be used by clients to access this service
      - "traefik.http.routers.django.entrypoints=web"
      # Here we define in wich network treafik can find this service
      - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - "traefik.http.services.django.loadbalancer.server.port=8000"

  worker:
    <<: *django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: colander_local_worker
    container_name: colander_local_worker
    platform: linux/x86_64
    depends_on:
      - postgres
      - minio
      - elasticsearch
      - redis
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    command: /start-worker
    networks:
      - web
    ports: [ ]
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=false"

  redis:
    image: redis:6
    networks:
      - web

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: colander_production_postgres
    container_name: colander_local_postgres
    networks:
      - web
    volumes:
      - colander_local_postgres_data:/var/lib/postgresql/data:Z
      - colander_local_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.postgres

  minio:
    image: quay.io/minio/minio:RELEASE.2022-09-22T18-57-27Z
    volumes:
      - colander_local_minio_data:/data
    env_file:
      - ./.envs/.local/.django
    command: server /data
    networks:
      - web
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  cyberchef:
    image: mpepping/cyberchef:latest
    container_name: colander_local_cyberchef
    networks:
      - web
    ports:
      - 8001:8000
    restart: unless-stopped
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=true"
      # Here we have to define the URL
      - "traefik.http.routers.cyberchef.rule=Host(`cyberchef.radis`)"
      # Here we are defining wich entrypoint should be used by clients to access this service
      - "traefik.http.routers.cyberchef.entrypoints=web"
      # Here we define in wich network treafik can find this service
      - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - "traefik.http.services.cyberchef.loadbalancer.server.port=8000"

  elasticsearch:
    image: elasticsearch:8.4.1
    networks:
      - web
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - colander_local_es_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type='single-node'
      - xpack.security.enabled='false'
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"

  keycloak-db:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: colander_production_postgres
    container_name: colander_local_keycloak_db
    environment:
      - POSTGRES_DB=keycloakdb
      - POSTGRES_USER=hhGArHWVrVQjuDcgBUNNlQqZNfqyNPfQ
      - POSTGRES_PASSWORD=vW9WtXmFWpsq5tATgcYNAi62cC1tWar1BsSrksBodMrra2bv4NHVvRyIm9k29Ro9
    networks:
      - web

  keycloak:
#    https://hub.docker.com/r/bitnami/keycloak
    image: bitnami/keycloak:20.0.5
    env_file:
      - ./.envs/.local/.keycloak
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - keycloak-db
    networks:
      - web
    ports:
      - 8003:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.radis`)"
      - "traefik.http.routers.keycloak.service=keycloak"
      - "traefik.http.routers.keycloak.entrypoints=web"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.http.services.keycloak.loadbalancer.passhostheader=true"
      - "traefik.http.routers.keycloak.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
    restart: unless-stopped

  kibana:
    image: kibana:8.4.1
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601


#  traefik-forward-auth:
#    image: thomseddon/traefik-forward-auth:2
#    networks:
#      - web
#    depends_on:
#      - keycloak
#    environment:
#      - DEFAULT_PROVIDER=oidc
#      - PROVIDERS_OIDC_CLIENT_ID=colander
#      - PROVIDERS_OIDC_CLIENT_SECRET=aJnfi6xIsvaxm6SEDehKoP7GBt4FADyj
#      - SECRET=dfge45te34teyhga3eq4yt4y
#      - INSECURE_COOKIE=true # Example assumes no https, do not use in production
#      - COOKIE_DOMAIN=radis
#      - PROVIDERS_OIDC_ISSUER_URL=http://auth.radis:88/realms/Colander
#      - LOG_LEVEL=debug
#    labels:
#      - "traefik.enable=true"
#      - "traefik.docker.network=web"
#      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://traefik-forward-auth:4181"
#      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User"
#      - "traefik.http.services.traefik-forward-auth.loadbalancer.server.port=4181"

#  forwardauth:
#    image: mesosphere/traefik-forward-auth
#    networks:
#      - web
#    depends_on:
#      - keycloak
#    environment:
#      - SECRET=dfge45te34teyhga3eq4yt4y
#      - PROVIDER_URI=http://auth.radis:88/realms/Colander
#      - CLIENT_ID=colander
#      - CLIENT_SECRET=aJnfi6xIsvaxm6SEDehKoP7GBt4FADyj
#    labels:
#      - "traefik.enable=true"
#      - "traefik.docker.network=web"
#      - "traefik.http.services.forwardauth.loadbalancer.server.port=4181"
#      - "traefik.http.routers.forwardauth.entrypoints=web"
#      - "traefik.http.routers.forwardauth.rule=Path(`/_oauth`)"
#      - "traefik.http.routers.forwardauth.middlewares=traefik-forward-auth"
#      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://forwardauth:4181"
#      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User"
#      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.trustForwardHeader=true"
